/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract } from 'web3-eth-contract';
import { TransactionObject, BlockType } from 'web3/eth/types';
import { EventData } from 'web3-eth-contract';

export interface TransactionRequestCoreRawData {
  0: (string)[];
  1: (boolean)[];
  2: (string)[];
  3: (string)[];
}

export class TransactionRequestCore extends Contract {
  methods: {
    requestData(): TransactionObject<TransactionRequestCoreRawData>;

    initialize(
      addressArgs: (string)[],
      uintArgs: (number | string)[],
      callData: (string | number[])[]
    ): TransactionObject<void>;

    execute(): TransactionObject<boolean>;

    cancel(): TransactionObject<boolean>;

    claim(): TransactionObject<boolean>;

    proxy(_to: string, _data: (string | number[])[]): TransactionObject<boolean>;

    refundClaimDeposit(): TransactionObject<boolean>;

    sendFee(): TransactionObject<boolean>;

    sendBounty(): TransactionObject<boolean>;

    sendOwnerEther(recipient: string): TransactionObject<boolean>;

    callData(): TransactionObject<(string)[]>;
  };
  events: {
    Aborted(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): Promise<EventData[]>;

    Cancelled(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): Promise<EventData[]>;

    Claimed(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): Promise<EventData[]>;

    Executed(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ): Promise<EventData[]>;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
    ) => Promise<EventData[]>;
  };
}
